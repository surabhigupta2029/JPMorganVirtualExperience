[{"/home/surabhi/JPMorganVirtualExperience/Task-2/src/index.tsx":"1","/home/surabhi/JPMorganVirtualExperience/Task-2/src/App.tsx":"2","/home/surabhi/JPMorganVirtualExperience/Task-2/src/DataStreamer.ts":"3","/home/surabhi/JPMorganVirtualExperience/Task-2/src/Graph.tsx":"4"},{"size":356,"mtime":1608607292755,"results":"5","hashOfConfig":"6"},{"size":2341,"mtime":1608687988018,"results":"7","hashOfConfig":"6"},{"size":1035,"mtime":1608607292755,"results":"8","hashOfConfig":"6"},{"size":2706,"mtime":1608688754405,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1n4gjrl",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"18","messages":"19","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/home/surabhi/JPMorganVirtualExperience/Task-2/src/index.tsx",["21"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\ndeclare global {\n  interface Window { perspective: any; }\n}\n\n/**\n * React App attaches the DOM to the DOM element #root in public/index.html\n */\nReactDOM.render(<App />, document.getElementById('root'));\n",[],"/home/surabhi/JPMorganVirtualExperience/Task-2/src/App.tsx",[],"/home/surabhi/JPMorganVirtualExperience/Task-2/src/DataStreamer.ts",[],"/home/surabhi/JPMorganVirtualExperience/Task-2/src/Graph.tsx",["22"],"import React, { Component } from 'react';\nimport { Table } from '@jpmorganchase/perspective';\nimport { ServerRespond } from './DataStreamer';\nimport './Graph.css';\n\n/**\n * Props declaration for <Graph />\n */\ninterface IProps {\n  data: ServerRespond[],\n}\n\n/**\n * Perspective library adds load to HTMLElement prototype.\n * This interface acts as a wrapper for Typescript compiler.\n */\ninterface PerspectiveViewerElement extends HTMLElement {\n  load: (table: Table) => void,\n}\n\n/**\n * React component that renders Perspective based on data\n * parsed from its parent through data property.\n */\nclass Graph extends Component<IProps, {}> {\n  // Perspective table\n  table: Table | undefined;\n\n  render() {\n    return React.createElement('perspective-viewer');\n  }\n\n  componentDidMount() {\n    // Get element to attach the table from the DOM.\n    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;\n\n    // Created a schema to assign all the values as shown below (in the elem statements)\n    const schema = {\n      stock: 'string',\n      top_ask_price: 'float',\n      top_bid_price: 'float',\n      timestamp: 'date',\n    };\n\n    if (window.perspective && window.perspective.worker()) {\n      this.table = window.perspective.worker().table(schema);\n    }\n    if (this.table) {\n      // Load the `table` in the `<perspective-viewer>` DOM reference.\n\n      // Add more Perspective configurations here.\n      elem.load(this.table);\n      elem.setAttribute('view', 'y_line'); //for a continuous line graph\n      elem.setAttribute('column-pivots', '[\"stock\"]'); //getting \"stock\" name from schema\n      elem.setAttribute('row-pivots', '[\"timestamp\"]'); //the x-axis\n      elem.setAttribute('columns', '[\"top_ask_price\"]'); //plotting only the \"top_ask_price\" of the data set \n      //creation of one data point\n      elem.setAttribute('aggregates',\n        '{\"stock\":\"distinct count\",\"top_ask_price\":\"avg\",\"top_bid_price\":\"avg\",\"timestamp\":\"distinct count\"}');\n    }\n  }\n\n  componentDidUpdate() {\n    // Everytime the data props is updated, insert the data into Perspective table\n    if (this.table) {\n      // As part of the task, you need to fix the way we update the data props to\n      // avoid inserting duplicated entries into Perspective table again.\n      this.table.update(this.props.data.map((el: any) => {\n        // Format the data from ServerRespond to the schema\n        return {\n          stock: el.stock,\n          top_ask_price: el.top_ask && el.top_ask.price || 0,\n          top_bid_price: el.top_bid && el.top_bid.price || 0,\n          timestamp: el.timestamp,\n        };\n      }));\n    }\n  }\n}\n\nexport default Graph;\n",{"ruleId":null,"fatal":true,"severity":2,"message":"23","line":7,"column":9},{"ruleId":null,"fatal":true,"severity":2,"message":"24","line":35,"column":99},"Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m  5 | \u001b[39m\u001b[36mimport\u001b[39m \u001b[32m'bootstrap/dist/css/bootstrap.css'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  6 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  7 | \u001b[39mdeclare global {\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  8 | \u001b[39m  interface \u001b[33mWindow\u001b[39m { perspective\u001b[33m:\u001b[39m any\u001b[33m;\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m  9 | \u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m 10 | \u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 33 | \u001b[39m  componentDidMount() {\u001b[0m\n\u001b[0m \u001b[90m 34 | \u001b[39m    \u001b[90m// Get element to attach the table from the DOM.\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 35 | \u001b[39m    \u001b[36mconst\u001b[39m elem\u001b[33m:\u001b[39m \u001b[33mPerspectiveViewerElement\u001b[39m \u001b[33m=\u001b[39m document\u001b[33m.\u001b[39mgetElementsByTagName(\u001b[32m'perspective-viewer'\u001b[39m)[\u001b[35m0\u001b[39m] as unknown as \u001b[33mPerspectiveViewerElement\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                                                                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 36 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 37 | \u001b[39m    \u001b[90m// Created a schema to assign all the values as shown below (in the elem statements)\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 38 | \u001b[39m    \u001b[36mconst\u001b[39m schema \u001b[33m=\u001b[39m {\u001b[0m"]